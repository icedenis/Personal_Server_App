@page "/personal/register"

@using Personal_Server_App.Models
@using Personal_Server_App.Interfaces

@inject IAuthenticationRepo _auth;
@inject NavigationManager UriHelper;

<h3>RegisterView</h3>


<h3 class="card-title">Register</h3>


@if (isFailed == true)
{
    <BSAlert Color="Color.Danger">Something went wrong </BSAlert>

}


<div class="card-body">
    <EditForm Model="Model" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="email">Email Address</label>
            <InputText Id="email" class="form-control" @bind-Value="Model.Username" />
            <ValidationMessage For="@(() => Model.Username)" />
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <InputText Id="password" type="password" class="form-control" @bind-Value="Model.Password" />
            <ValidationMessage For="@(() => Model.Password)" />
        </div>
        <div class="form-group">
            <label for="confirmpassword">Confirm Password</label>
            <InputText Id="confirmpassword" type="password" class="form-control" @bind-Value="Model.ConfirmPass" />
            <ValidationMessage For="@(() => Model.ConfirmPass)" />
        </div>
        <button type="submit" class="btn btn-primary btn-block">Save</button>

    </EditForm>
</div>







@code {


    private Register_Personal Model = new Register_Personal();

    protected bool response { get; set; }
    protected bool isFailed { get; set; }

    private async Task HandleRegistration()
    {
        response = await _auth.Register(Model);

        if (response)
        {
            UriHelper.NavigateTo("/");
        }
        else
        {
            isFailed = true;
        }

    }

}
